{"version":3,"sources":["app/api/group/mentorSlice.js","app/api/group/courseSlice.js","pages/Student/components/StudentSearchCard/StudentAddModal.jsx","pages/Student/components/StudentSearchCard/index.jsx","pages/Student/components/StudentDetailCard/index.jsx","pages/Student/components/StudentListCard/index.jsx","pages/Student/index.jsx"],"names":["extendedApi","apiSlice","injectEndpoints","endpoints","builder","searchMentors","mutation","query","queryStr","url","method","params","groupType","providesTags","result","map","mentor","type","MENTORGROUP","id","groupId","getMentorInfo","getMentorGroupStudents","role","arg","student","STUDENT","userId","concat","STUDENT_LIST","addNewMentorGroup","body","mentorId","groupName","displayId","invalidatesTags","MENTORGROUP_LIST","removeMentorGroup","changeGroupName","error","changeGroupDisplayId","changeMentorId","currentMentorId","newMentorId","useSearchMentorsMutation","useGetMentorGroupStudentsQuery","useGetMentorInfoQuery","useAddNewMentorGroupMutation","useRemoveMentorGroupMutation","useChangeGroupNameMutation","useChangeMentorIdMutation","useChangeGroupDisplayIdMutation","searchCourses","course","COURSE","getCourseInfo","getCourseStudents","addNewCourse","courseName","timeSlot","lecturerId","COURSE_LIST","removeCourse","changeCourseName","changeCourseDisplayId","changeCourseTimeSlot","changeCourseLecturer","currentLecturerId","newLecturerId","useSearchCoursesMutation","useGetCourseInfoQuery","useGetCourseStudentsQuery","useAddNewCourseMutation","useRemoveCourseMutation","useChangeCourseNameMutation","useChangeCourseTimeSlotMutation","useChangeCourseLecturerMutation","useChangeCourseDisplayIdMutation","validationSchema","Yup","shape","required","name","password","passwordConfirmation","test","value","this","parent","address","facultyId","initialValues","StudentAddModal","show","handleClose","dispatch","useDispatch","useSearchFacultiesMutation","triggerSearch","useAddNewStudentMutation","triggerAdd","searchFaculties","inputValue","a","unwrap","faculties","faculty","label","handleSubmit","values","actions","setSelectedStudentId","console","log","Modal","onHide","Header","closeButton","Title","onSubmit","formikProps","Form","noValidate","onReset","handleReset","Body","component","InputField","placeholder","AsyncSelectField","loadOptions","Footer","Button","variant","onClick","isSubmitting","Spinner","animation","as","size","StudentSearchCard","useSearchStudentsMutation","trigger","data","selectedStudentId","useSelector","selectedStudentIdSelector","useState","addModal","setAddModal","SearchCard","items","selectedItemKey","keySelector","nameSelector","onSearch","onAdd","onSelect","StudentDetailCard","useGetStudentMentorGroupQuery","mentorGroup","mentorIsFetching","isFetching","useGetStudentFacultyQuery","facultyIsFetching","useGetStudentInfoQuery","studentInfo","studentIsFetching","useRemoveStudentMutation","triggerRemoveStudent","useChangeStudentInfoMutation","triggerChangeStudentInfo","useChangeUserPasswordMutation","triggerChangePassword","useChangeStudentMentorMutation","triggerChangeMentor","useChangeStudentFacultyMutation","triggerChangeFaculty","triggerSearchFaculty","triggerSearchMentor","showRemoveWarning","setShowRemoveWarning","showEditInfoModal","setShowEditInfoModal","showChangePasswordModal","setShowChangePasswordModal","showChangeMentorModal","setShowChangeMentorModal","showChangeFacultyModal","setShowChangeFacultyModal","DetailCard","fields","content","psid","links","mentorName","destination","facultyName","buttons","EditUserInfoModal","title","ChangePasswordModal","SelectItemModal","newMentorGroupId","currentMentorGroupId","handleSearchItems","mentors","newFacultyId","currentFacultyId","ConfirmationModal","StudentListCard","useGetStudentCoursesQuery","courses","useRemoveStudentCourseMutation","triggerRemoveCourse","useAddStudentCourseMutation","triggerAddCourse","triggerSearchCourse","ListCard","linkSelector","showButtons","handleRemove","handleAdd","StudentPage","useItemParam","selectedItemId","setSelectedItemId","studentId","Row","className","Col","md"],"mappings":"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","file":"static/js/8.33f00333.chunk.js","sourcesContent":["import {\r\n  MENTORGROUP,\r\n  MENTORGROUP_LIST,\r\n  STUDENT,\r\n  STUDENT_LIST,\r\n} from '../tagConstants'\r\nimport { apiSlice } from '../index'\r\n\r\nconst extendedApi = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    searchMentors: builder.mutation({\r\n      query: (queryStr) => ({\r\n        url: '/group',\r\n        method: 'GET',\r\n        params: { query: queryStr || '', groupType: 'MENTORGROUP' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result.map((mentor) => ({ type: MENTORGROUP, id: mentor.groupId })),\r\n    }),\r\n\r\n    getMentorInfo: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/mentor/info',\r\n        method: 'GET',\r\n        params: { groupId },\r\n      }),\r\n      providesTags: (result = {}, error, arg) => [\r\n        { type: MENTORGROUP, id: result.groupId },\r\n      ],\r\n    }),\r\n\r\n    getMentorGroupStudents: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/group/user',\r\n        method: 'GET',\r\n        params: { groupId, role: 'STUDENT' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result\r\n          .map((student) => ({ type: STUDENT, id: student.userId }))\r\n          .concat([{ type: STUDENT_LIST, id: arg }]),\r\n    }),\r\n\r\n    addNewMentorGroup: builder.mutation({\r\n      query: ({ mentorId, groupName, displayId }) => ({\r\n        url: '/mentor',\r\n        method: 'POST',\r\n        body: { mentorId, groupName, displayId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: MENTORGROUP_LIST, id: arg.mentorId },\r\n      ],\r\n    }),\r\n\r\n    removeMentorGroup: builder.mutation({\r\n      query: ({ groupId }) => ({\r\n        url: '/group',\r\n        method: 'DELETE',\r\n        params: { groupId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeGroupName: builder.mutation({\r\n      query: ({ groupId, groupName }) => ({\r\n        url: '/group/name',\r\n        method: 'PUT',\r\n        body: { groupId, groupName },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeGroupDisplayId: builder.mutation({\r\n      query: ({ groupId, displayId }) => ({\r\n        url: '/group/displayId',\r\n        method: 'PUT',\r\n        body: { groupId, displayId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeMentorId: builder.mutation({\r\n      query: ({ groupId, currentMentorId, newMentorId }) => ({\r\n        url: '/mentor',\r\n        method: 'PUT',\r\n        body: { groupId, mentorId: newMentorId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n        { type: MENTORGROUP_LIST, id: arg.currentMentorId },\r\n        { type: MENTORGROUP_LIST, id: arg.newMentorId },\r\n      ],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useSearchMentorsMutation,\r\n  useGetMentorGroupStudentsQuery,\r\n  useGetMentorInfoQuery,\r\n  useAddNewMentorGroupMutation,\r\n  useRemoveMentorGroupMutation,\r\n  useChangeGroupNameMutation,\r\n  useChangeMentorIdMutation,\r\n  useChangeGroupDisplayIdMutation,\r\n} = extendedApi\r\n","import { COURSE, COURSE_LIST, STUDENT, STUDENT_LIST } from '../tagConstants'\r\nimport { apiSlice } from '../index'\r\n\r\nconst extendedApi = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    searchCourses: builder.mutation({\r\n      query: (queryStr) => ({\r\n        url: '/group',\r\n        method: 'GET',\r\n        params: { query: queryStr || '', groupType: 'COURSE' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result.map((course) => ({ type: COURSE, id: course.groupId })),\r\n    }),\r\n\r\n    getCourseInfo: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/course/info',\r\n        method: 'GET',\r\n        params: { groupId },\r\n      }),\r\n      providesTags: (result, error, arg) => [{ type: COURSE, id: arg }],\r\n    }),\r\n\r\n    getCourseStudents: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/group/user',\r\n        method: 'GET',\r\n        params: { groupId, role: 'STUDENT' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result\r\n          .map((student) => ({ type: STUDENT, id: student.userId }))\r\n          .concat([{ type: STUDENT_LIST, id: arg }]),\r\n    }),\r\n\r\n    addNewCourse: builder.mutation({\r\n      query: ({ courseName, timeSlot, lecturerId, displayId }) => ({\r\n        url: '/course',\r\n        method: 'POST',\r\n        body: { courseName, timeSlot, lecturerId, displayId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: COURSE_LIST, id: arg.lecturerId },\r\n      ],\r\n    }),\r\n\r\n    removeCourse: builder.mutation({\r\n      query: ({ groupId }) => ({\r\n        url: '/group',\r\n        method: 'DELETE',\r\n        params: { groupId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseName: builder.mutation({\r\n      query: ({ groupId, groupName }) => ({\r\n        url: '/group/name',\r\n        method: 'PUT',\r\n        body: { groupId, groupName },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseDisplayId: builder.mutation({\r\n      query: ({ groupId, displayId }) => ({\r\n        url: '/group/displayId',\r\n        method: 'PUT',\r\n        body: { groupId, displayId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseTimeSlot: builder.mutation({\r\n      query: ({ groupId, timeSlot }) => ({\r\n        url: '/course/timeslot',\r\n        method: 'PUT',\r\n        body: { groupId, timeSlot },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseLecturer: builder.mutation({\r\n      query: ({ groupId, currentLecturerId, newLecturerId }) => ({\r\n        url: '/course/lecturer',\r\n        method: 'PUT',\r\n        body: { groupId, lecturerId: newLecturerId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n        { type: COURSE_LIST, id: arg.currentLecturerId },\r\n        { type: COURSE_LIST, id: arg.newLecturerId },\r\n      ],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useSearchCoursesMutation,\r\n  useGetCourseInfoQuery,\r\n  useGetCourseStudentsQuery,\r\n  useAddNewCourseMutation,\r\n  useRemoveCourseMutation,\r\n  useChangeCourseNameMutation,\r\n  useChangeCourseTimeSlotMutation,\r\n  useChangeCourseLecturerMutation,\r\n  useChangeCourseDisplayIdMutation,\r\n} = extendedApi\r\n","import * as Yup from 'yup'\r\nimport { FastField, Formik } from 'formik'\r\nimport { Modal, Button, Form, Spinner } from 'react-bootstrap'\r\nimport InputField from '../../../../components/custom-fields/InputField'\r\nimport AsyncSelectField from '../../../../components/custom-fields/AsyncSelectField'\r\nimport { useSearchFacultiesMutation } from '../../../../app/api/group/facultySlice'\r\nimport { useAddNewStudentMutation } from '../../../../app/api/user/studentSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setSelectedStudentId } from '../../../../app/pageSlice'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  displayId: Yup.string().required('This field is required.'),\r\n  name: Yup.string().required('This field is required.'),\r\n  password: Yup.string().required('This field is required.'),\r\n  passwordConfirmation: Yup.string().test(\r\n    'passwords-match',\r\n    'Passwords must match',\r\n    function (value) {\r\n      return this.parent.password === value\r\n    },\r\n  ),\r\n  address: Yup.string().required('This field is required.'),\r\n  facultyId: Yup.string().required('This field is required.'),\r\n})\r\n\r\nconst initialValues = {\r\n  displayId: '',\r\n  name: '',\r\n  password: '',\r\n  passwordConfirmation: '',\r\n  address: '',\r\n  facultyId: '',\r\n}\r\n\r\nconst StudentAddModal = ({ show, handleClose }) => {\r\n  const dispatch = useDispatch()\r\n  const [triggerSearch] = useSearchFacultiesMutation()\r\n  const [triggerAdd] = useAddNewStudentMutation()\r\n\r\n  const searchFaculties = async (inputValue) => {\r\n    const faculties = await triggerSearch(inputValue).unwrap()\r\n    return faculties.map((faculty) => ({\r\n      value: faculty.groupId,\r\n      label: faculty.groupName,\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = async (values, actions) => {\r\n    try {\r\n      const { userId } = await triggerAdd(values).unwrap()\r\n      handleClose()\r\n      dispatch(setSelectedStudentId(userId))\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Add new student</Modal.Title>\r\n      </Modal.Header>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {(formikProps) => (\r\n          <Form\r\n            noValidate\r\n            onSubmit={formikProps.handleSubmit}\r\n            onReset={formikProps.handleReset}\r\n          >\r\n            <Modal.Body>\r\n              <FastField\r\n                name=\"displayId\"\r\n                component={InputField}\r\n                label=\"Student ID\"\r\n                placeholder=\"ITITIU18302...\"\r\n              />\r\n              <FastField\r\n                name=\"name\"\r\n                component={InputField}\r\n                label=\"Name\"\r\n                placeholder=\"Le Van A...\"\r\n              />\r\n              <FastField\r\n                name=\"address\"\r\n                component={InputField}\r\n                label=\"Address\"\r\n                placeholder=\"District 5, Ho Chi Minh City...\"\r\n              />\r\n              <FastField\r\n                name=\"password\"\r\n                component={InputField}\r\n                placeholder=\"New password...\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n              />\r\n              <FastField\r\n                name=\"passwordConfirmation\"\r\n                component={InputField}\r\n                placeholder=\"Type password again...\"\r\n                type=\"password\"\r\n                label=\"Password confirmation\"\r\n              />\r\n              <FastField\r\n                name=\"facultyId\"\r\n                component={AsyncSelectField}\r\n                loadOptions={searchFaculties}\r\n                label=\"Faculty\"\r\n              />\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {formikProps.isSubmitting && (\r\n                  <Spinner\r\n                    animation=\"border\"\r\n                    as=\"span\"\r\n                    role=\"status\"\r\n                    size=\"sm\"\r\n                  />\r\n                )}\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StudentAddModal\r\n","import { Fragment, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSearchStudentsMutation } from '../../../../app/api/user/studentSlice'\r\nimport {\r\n  selectedStudentIdSelector,\r\n  setSelectedStudentId,\r\n} from '../../../../app/pageSlice'\r\nimport SearchCard from '../../../../components/SearchCard'\r\nimport StudentAddModal from './StudentAddModal'\r\n\r\nconst StudentSearchCard = () => {\r\n  const dispatch = useDispatch()\r\n  const [trigger, query] = useSearchStudentsMutation()\r\n  const { data } = query\r\n  const selectedStudentId = useSelector(selectedStudentIdSelector)\r\n  const [addModal, setAddModal] = useState(false)\r\n\r\n  return (\r\n    <Fragment>\r\n      <SearchCard\r\n        label=\"Student\"\r\n        items={data}\r\n        selectedItemKey={selectedStudentId}\r\n        keySelector={(student) => student.id}\r\n        nameSelector={(student) => student.name}\r\n        // showKey={true}\r\n        onSearch={(query) => trigger(query)}\r\n        onAdd={() => setAddModal(true)}\r\n        onSelect={(student) => dispatch(setSelectedStudentId(student.id))}\r\n      />\r\n      <StudentAddModal show={addModal} handleClose={() => setAddModal(false)} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default StudentSearchCard\r\n","import { Fragment, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSearchFacultiesMutation } from '../../../../app/api/group/facultySlice'\r\nimport { useSearchMentorsMutation } from '../../../../app/api/group/mentorSlice'\r\nimport {\r\n  useChangeStudentFacultyMutation,\r\n  useChangeStudentInfoMutation,\r\n  useChangeStudentMentorMutation,\r\n  useChangeUserPasswordMutation,\r\n  useGetStudentFacultyQuery,\r\n  useGetStudentInfoQuery,\r\n  useGetStudentMentorGroupQuery,\r\n  useRemoveStudentMutation,\r\n} from '../../../../app/api/user/studentSlice'\r\nimport { setSelectedStudentId } from '../../../../app/pageSlice'\r\nimport DetailCard from '../../../../components/DetailCard'\r\nimport ChangePasswordModal from '../../../../components/modals/ChangePasswordModal'\r\nimport ConfirmationModal from '../../../../components/modals/ConfirmationModal'\r\nimport EditUserInfoModal from '../../../../components/modals/EditUserInfoModal'\r\nimport SelectItemModal from '../../../../components/modals/SelectItemModal'\r\n\r\nconst StudentDetailCard = ({ selectedStudentId }) => {\r\n  const { data: mentorGroup, isFetching: mentorIsFetching } =\r\n    useGetStudentMentorGroupQuery(selectedStudentId)\r\n  const { data: faculty, isFetching: facultyIsFetching } =\r\n    useGetStudentFacultyQuery(selectedStudentId)\r\n  const { data: studentInfo, isFetching: studentIsFetching } =\r\n    useGetStudentInfoQuery(selectedStudentId)\r\n\r\n  const [triggerRemoveStudent] = useRemoveStudentMutation()\r\n  const [triggerChangeStudentInfo] = useChangeStudentInfoMutation()\r\n  const [triggerChangePassword] = useChangeUserPasswordMutation()\r\n  const [triggerChangeMentor] = useChangeStudentMentorMutation()\r\n  const [triggerChangeFaculty] = useChangeStudentFacultyMutation()\r\n  const [triggerSearchFaculty] = useSearchFacultiesMutation()\r\n  const [triggerSearchMentor] = useSearchMentorsMutation()\r\n\r\n  const [showRemoveWarning, setShowRemoveWarning] = useState(false)\r\n  const [showEditInfoModal, setShowEditInfoModal] = useState(false)\r\n  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false)\r\n  const [showChangeMentorModal, setShowChangeMentorModal] = useState(false)\r\n  const [showChangeFacultyModal, setShowChangeFacultyModal] = useState(false)\r\n\r\n  const isFetching = mentorIsFetching || facultyIsFetching || studentIsFetching\r\n  const dispatch = useDispatch()\r\n\r\n  if (isFetching) {\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <DetailCard\r\n        label=\"Student\"\r\n        fields={[\r\n          { label: 'Name', content: studentInfo.name },\r\n          { label: 'ID', content: studentInfo.displayId },\r\n          { label: 'PSID', content: studentInfo.psid },\r\n          { label: 'Address', content: studentInfo.address },\r\n        ]}\r\n        links={[\r\n          {\r\n            label: 'Mentor',\r\n            content: `${mentorGroup.mentorName} (${mentorGroup.groupName})`,\r\n            destination: `/mentor/${mentorGroup.groupId || ''}`,\r\n          },\r\n          {\r\n            label: 'Faculty',\r\n            content: faculty.facultyName,\r\n            destination: `/faculty/${faculty.groupId || ''}`,\r\n          },\r\n        ]}\r\n        buttons={[\r\n          {\r\n            label: 'Edit basic info',\r\n            onClick: () => {\r\n              setShowEditInfoModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change password',\r\n            onClick: () => {\r\n              setShowChangePasswordModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change mentor',\r\n            onClick: () => {\r\n              setShowChangeMentorModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change faculty',\r\n            onClick: () => {\r\n              setShowChangeFacultyModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Remove student',\r\n            onClick: () => {\r\n              setShowRemoveWarning(true)\r\n            },\r\n          },\r\n        ]}\r\n      />\r\n      <EditUserInfoModal\r\n        title=\"Edit student info\"\r\n        show={showEditInfoModal}\r\n        handleClose={() => {\r\n          setShowEditInfoModal(false)\r\n        }}\r\n        handleSubmit={async ({ name, address, displayId }) => {\r\n          await triggerChangeStudentInfo({\r\n            id: studentInfo.id,\r\n            name,\r\n            address,\r\n            displayId,\r\n          })\r\n        }}\r\n        initialValues={{\r\n          name: studentInfo.name,\r\n          address: studentInfo.address,\r\n          displayId: studentInfo.displayId,\r\n        }}\r\n      />\r\n      <ChangePasswordModal\r\n        title=\"Change student password\"\r\n        show={showChangePasswordModal}\r\n        handleClose={() => {\r\n          setShowChangePasswordModal(false)\r\n        }}\r\n        handleSubmit={async (password) => {\r\n          await triggerChangePassword({\r\n            userId: studentInfo.id,\r\n            password,\r\n          })\r\n        }}\r\n      />\r\n      <SelectItemModal\r\n        title=\"Change mentor group\"\r\n        show={showChangeMentorModal}\r\n        handleClose={() => {\r\n          setShowChangeMentorModal(false)\r\n        }}\r\n        handleSubmit={async (newMentorGroupId) => {\r\n          await triggerChangeMentor({\r\n            id: studentInfo.id,\r\n            currentMentorGroupId: mentorGroup.groupId,\r\n            newMentorGroupId,\r\n          })\r\n        }}\r\n        handleSearchItems={async (query) => {\r\n          const mentors = await triggerSearchMentor(query).unwrap()\r\n          return mentors.map((mentor) => ({\r\n            value: mentor.groupId,\r\n            label: mentor.groupName,\r\n          }))\r\n        }}\r\n      />\r\n      <SelectItemModal\r\n        title=\"Change student faculty\"\r\n        show={showChangeFacultyModal}\r\n        handleClose={() => {\r\n          setShowChangeFacultyModal(false)\r\n        }}\r\n        handleSubmit={async (newFacultyId) => {\r\n          await triggerChangeFaculty({\r\n            id: studentInfo.id,\r\n            currentFacultyId: faculty.groupId,\r\n            newFacultyId,\r\n          })\r\n        }}\r\n        handleSearchItems={async (query) => {\r\n          const faculties = await triggerSearchFaculty(query).unwrap()\r\n          return faculties.map((faculty) => ({\r\n            value: faculty.groupId,\r\n            label: faculty.groupName,\r\n          }))\r\n        }}\r\n      />\r\n      <ConfirmationModal\r\n        title=\"Remove student?\"\r\n        content=\"Information related to this student cannot be recovered.\"\r\n        show={showRemoveWarning}\r\n        handleClose={() => setShowRemoveWarning(false)}\r\n        handleSubmit={async () => {\r\n          dispatch(setSelectedStudentId(null))\r\n          await triggerRemoveStudent({ userId: studentInfo.id }).unwrap()\r\n        }}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default StudentDetailCard\r\n","import { useSearchCoursesMutation } from '../../../../app/api/group/courseSlice'\r\nimport {\r\n  useAddStudentCourseMutation,\r\n  useGetStudentCoursesQuery,\r\n  useRemoveStudentCourseMutation,\r\n} from '../../../../app/api/user/studentSlice'\r\nimport ListCard from '../../../../components/ListCard'\r\n\r\nconst StudentListCard = ({ selectedStudentId }) => {\r\n  const { data: courses, isFetching } =\r\n    useGetStudentCoursesQuery(selectedStudentId)\r\n  const [triggerRemoveCourse] = useRemoveStudentCourseMutation()\r\n  const [triggerAddCourse] = useAddStudentCourseMutation()\r\n  const [triggerSearchCourse] = useSearchCoursesMutation()\r\n\r\n  if (isFetching) {\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <ListCard\r\n      label=\"Course\"\r\n      items={courses}\r\n      keySelector={(course) => course.groupId}\r\n      nameSelector={(course) => course.courseName}\r\n      linkSelector={(course) => `/course/${course.groupId}`}\r\n      showButtons={true}\r\n      handleRemove={async (course) => {\r\n        await triggerRemoveCourse({\r\n          userId: selectedStudentId,\r\n          groupId: course.groupId,\r\n        }).unwrap()\r\n      }}\r\n      handleAdd={async (groupId) => {\r\n        await triggerAddCourse({\r\n          userId: selectedStudentId,\r\n          groupId: groupId,\r\n        }).unwrap()\r\n      }}\r\n      handleSearchItems={async (query) => {\r\n        const courses = await triggerSearchCourse(query).unwrap()\r\n        return courses.map((course) => ({\r\n          value: course.groupId,\r\n          label: course.groupName,\r\n        }))\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StudentListCard\r\n","import useItemParam from '../../hooks/useItemParam'\r\nimport {\r\n  selectedStudentIdSelector,\r\n  setSelectedStudentId,\r\n} from '../../app/pageSlice'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport StudentSearchCard from './components/StudentSearchCard'\r\nimport StudentDetailCard from './components/StudentDetailCard'\r\nimport StudentListCard from './components/StudentListCard'\r\nimport { Fragment } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst StudentPage = () => {\r\n  const dispatch = useDispatch()\r\n  const selectedStudentId = useSelector(selectedStudentIdSelector)\r\n\r\n  useItemParam({\r\n    selectedItemId: selectedStudentId,\r\n    setSelectedItemId: (studentId) => {\r\n      dispatch(setSelectedStudentId(studentId))\r\n    },\r\n  })\r\n\r\n  return (\r\n    <Row className=\"justify-content-md-center my-3\">\r\n      <Col md=\"3\">\r\n        <StudentSearchCard />\r\n      </Col>\r\n      {selectedStudentId ? (\r\n        <Fragment>\r\n          <Col md=\"4\">\r\n            <StudentDetailCard selectedStudentId={selectedStudentId} />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <StudentListCard selectedStudentId={selectedStudentId} />\r\n          </Col>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <Col md=\"4\"></Col>\r\n          <Col md=\"4\"></Col>\r\n        </Fragment>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default StudentPage\r\n"],"sourceRoot":""}