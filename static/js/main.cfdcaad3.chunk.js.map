{"version":3,"sources":["components/NavigationBar/index.jsx","pages/Login/index.jsx","App.js","app/store.js","index.js","app/authSlice.js","app/api/tagConstants.js","app/pageSlice.js","config.js","app/api/index.js","components/custom-fields/InputField/index.jsx"],"names":["NavigationBar","dispatch","useDispatch","Navbar","bg","variant","Container","className","Brand","href","target","rel","Nav","Link","as","NavLink","to","Button","onClick","logout","validationSchema","Yup","shape","userId","required","password","Login","navigate","useNavigate","from","useLocation","state","pathname","handleLogin","values","actions","a","adminLogin","unwrap","res","message","setFieldError","replace","console","log","Card","border","style","width","Header","Body","initialValues","onSubmit","formikProps","Form","noValidate","handleSubmit","onReset","handleReset","name","label","component","InputField","type","isSubmitting","Spinner","animation","role","size","StudentPage","React","lazy","LecturerPage","MentorPage","CoursePage","FacultyPage","NotFoundPage","RequireAuth","children","isAuthenticated","useSelector","selectJWT","location","App","isLoading","selectLoadingCount","ProgressBar","animated","now","path","element","combinedReducer","combineReducers","apiSlice","reducerPath","reducer","authSlice","pageSlice","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","action","toString","undefined","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","setupListeners","config","checkEnvVariables","Router","isProduction","HashRouter","BrowserRouter","ReactDOM","render","StrictMode","loading","fallback","document","getElementById","createAsyncThunk","thunkAPI","fetch","apiUrl","method","headers","body","JSON","stringify","response","ok","rejectWithValue","json","createSlice","initialState","user","id","psid","displayId","jwt","reducers","extraReducers","builder","addCase","fulfilled","payload","accessToken","COURSE","FACULTY","MENTORGROUP","LECTURER","STUDENT","MENTORGROUP_LIST","STUDENT_LIST","LECTURER_LIST","COURSE_LIST","selectedStudentId","selectedLecturerId","selectedMentorId","selectedCourseId","selectedFacultyId","loadingCount","loadingStarted","loadingDone","setSelectedStudentId","setSelectedLecturerId","setSelectedMentorId","setSelectedCourseId","setSelectedFacultyId","selectedStudentIdSelector","selectedLecturerIdSelector","selectedMentorIdSelector","selectedCourseIdSelector","selectedFacultyIdSelector","dotenv","ENV_VARS","process","forEach","warn","authorizedBaseQuery","fetchBaseQuery","baseUrl","prepareHeaders","getState","token","set","baseQueryWithReauth","args","api","extraOptions","result","error","status","createApi","baseQuery","refetchOnReconnect","tagTypes","endpoints","props","field","form","placeholder","disabled","errors","touched","showError","Group","Label","htmlFor","Control","isInvalid","msg","Feedback"],"mappings":"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","file":"static/js/main.cfdcaad3.chunk.js","sourcesContent":["import { Navbar, Container, Nav, Button } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { logout } from '../../app/authSlice'\n\nconst NavigationBar = () => {\n  const dispatch = useDispatch()\n\n  const handleLogout = () => {\n    dispatch(logout())\n  }\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Container className=\"d-flex justify-content-between\">\n        <div className=\"d-flex\">\n          <Navbar.Brand\n            href=\"https://github.com/haminhchien/zhongli\"\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n          >\n            ADMIN WEB\n          </Navbar.Brand>\n          <Nav variant=\"pills\" className=\"me-auto\">\n            <Nav.Link as={NavLink} to=\"/student\">\n              Student\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/lecturer\">\n              Lecturer\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/mentor\">\n              Mentor\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/course\">\n              Course\n            </Nav.Link>\n            <Nav.Link as={NavLink} to=\"/faculty\">\n              Faculty\n            </Nav.Link>\n          </Nav>\n        </div>\n        <Button variant=\"outline-light\" onClick={handleLogout}>\n          Logout\n        </Button>\n      </Container>\n    </Navbar>\n  )\n}\n\nexport default NavigationBar\n","import { FastField, Formik } from 'formik'\nimport { Button, Card, Form, Spinner } from 'react-bootstrap'\nimport { useLocation, useNavigate } from 'react-router-dom'\nimport InputField from '../../components/custom-fields/InputField'\nimport * as Yup from 'yup'\nimport { adminLogin } from '../../app/authSlice'\nimport { useDispatch } from 'react-redux'\n\nconst validationSchema = Yup.object().shape({\n  userId: Yup.string().required('This field is required.'),\n  password: Yup.string().required('This field is required.'),\n})\n\nconst Login = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const location = useLocation()\n  const from = location.state?.from?.pathname || '/'\n\n  const handleLogin = async (values, actions) => {\n    try {\n      const res = await dispatch(adminLogin(values)).unwrap()\n      if (res?.message) {\n        actions.setFieldError('password', res.message)\n      } else {\n        navigate(from, { replace: true })\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  return (\n    <Card\n      border=\"secondary\"\n      className=\"my-5 mx-auto\"\n      style={{ width: '350px' }}\n    >\n      <Card.Header className=\"text-center text-white bg-primary\">\n        <h3>Login</h3>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{\n            userId: '',\n            password: '',\n          }}\n          onSubmit={handleLogin}\n          validationSchema={validationSchema}\n        >\n          {(formikProps) => (\n            <Form\n              noValidate\n              onSubmit={formikProps.handleSubmit}\n              onReset={formikProps.handleReset}\n            >\n              <FastField\n                name=\"userId\"\n                label=\"User ID:\"\n                component={InputField}\n              />\n              <FastField\n                name=\"password\"\n                label=\"Password:\"\n                type=\"password\"\n                component={InputField}\n              />\n              <Button variant=\"primary\" type=\"submit\">\n                {formikProps.isSubmitting && (\n                  <Spinner\n                    animation=\"border\"\n                    as=\"span\"\n                    role=\"status\"\n                    size=\"sm\"\n                  />\n                )}\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default Login\n","import React, { Fragment } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectJWT } from './app/authSlice'\nimport { Routes, Route, Navigate, useLocation } from 'react-router-dom'\n\nimport NavigationBar from './components/NavigationBar'\nimport { ProgressBar } from 'react-bootstrap'\nimport { selectLoadingCount } from './app/pageSlice'\n\nimport './App.css'\nimport Login from './pages/Login'\n\nconst StudentPage = React.lazy(() => import('./pages/Student'))\nconst LecturerPage = React.lazy(() => import('./pages/Lecturer'))\nconst MentorPage = React.lazy(() => import('./pages/Mentor'))\nconst CoursePage = React.lazy(() => import('./pages/Course'))\nconst FacultyPage = React.lazy(() => import('./pages/Faculty'))\nconst NotFoundPage = React.lazy(() => import('./pages/NotFound'))\n\nfunction RequireAuth({ children }) {\n  const isAuthenticated = !!useSelector(selectJWT)\n  let location = useLocation()\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/login\" state={{ from: location }} />\n  }\n\n  return children\n}\n\nfunction App() {\n  const isLoading = useSelector(selectLoadingCount) > 0\n\n  return (\n    <Fragment>\n      <NavigationBar />\n      <ProgressBar variant=\"secondary\" animated now={isLoading ? 100 : 0} />\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <RequireAuth>\n              <Navigate replace to=\"/student\" />\n            </RequireAuth>\n          }\n        />\n        <Route\n          path=\"student/*\"\n          element={\n            <RequireAuth>\n              <StudentPage />\n            </RequireAuth>\n          }\n        />\n        <Route\n          path=\"lecturer/*\"\n          element={\n            <RequireAuth>\n              <LecturerPage />\n            </RequireAuth>\n          }\n        />\n        <Route\n          path=\"mentor/*\"\n          element={\n            <RequireAuth>\n              <MentorPage />\n            </RequireAuth>\n          }\n        />\n        <Route\n          path=\"course/*\"\n          element={\n            <RequireAuth>\n              <CoursePage />\n            </RequireAuth>\n          }\n        />\n        <Route\n          path=\"faculty/*\"\n          element={\n            <RequireAuth>\n              <FacultyPage />\n            </RequireAuth>\n          }\n        />\n        <Route path=\"login\" element={<Login />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </Fragment>\n  )\n}\n\nexport default App\n","import { configureStore, combineReducers } from '@reduxjs/toolkit'\nimport storage from 'redux-persist/lib/storage'\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'\nimport { apiSlice } from './api'\nimport { authSlice, logout } from './authSlice'\nimport { pageSlice } from './pageSlice'\nimport { setupListeners } from '@reduxjs/toolkit/dist/query'\n\nconst combinedReducer = combineReducers({\n  [apiSlice.reducerPath]: apiSlice.reducer,\n  [authSlice.name]: authSlice.reducer,\n  [pageSlice.name]: pageSlice.reducer,\n})\n\nconst rootReducer = (state, action) => {\n  if (action.type === logout.toString()) {\n    // check for action type\n    state = undefined\n  }\n  return combinedReducer(state, action)\n}\n\n// Configure redux-persist\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: [apiSlice.reducerPath, pageSlice.name],\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat(apiSlice.middleware),\n})\n\nexport const persistor = persistStore(store)\n\n// enable listener behavior for the store\nsetupListeners(store.dispatch)\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { persistor, store } from './app/store'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\nimport config from './config'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n// Check if all environment variables are set\nconfig.checkEnvVariables()\n\nconst Router = config.isProduction ? HashRouter : BrowserRouter\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <PersistGate\n        loading={<div>Loading redux state...</div>}\n        persistor={persistor}\n      >\n        <Router>\n          <Suspense fallback={<div>Loading route...</div>}>\n            <App />\n          </Suspense>\n        </Router>\n      </PersistGate>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport config from '../config'\n\nconst initialState = {\n  user: {\n    id: null,\n    psid: null,\n    name: null,\n    role: null,\n    displayId: null,\n  },\n  jwt: null,\n}\n\nexport const adminLogin = createAsyncThunk(\n  'auth/adminLogin',\n  async ({ userId, password }, thunkAPI) => {\n    const response = await fetch(`${config.apiUrl}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ userId, password }),\n    })\n    if (!response.ok) {\n      thunkAPI.rejectWithValue(response)\n    }\n    return response.json()\n  },\n)\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout(state, action) {}, // state will be reset in root reducer\n  },\n  extraReducers: (builder) => {\n    builder.addCase(adminLogin.fulfilled, (state, { payload }) => {\n      state.jwt = payload.accessToken\n      state.user = {\n        id: payload.id,\n        psid: payload.psid,\n        name: payload.name,\n        role: payload.role,\n        displayId: payload.displayId,\n      }\n    })\n  },\n})\n\nexport const selectJWT = (state) => state[authSlice.name].jwt\n\nexport const { logout } = authSlice.actions\n","export const COURSE = 'COURSE'\nexport const FACULTY = 'FACULTY'\nexport const MENTORGROUP = 'MENTORGROUP'\nexport const LECTURER = 'LECTURER'\nexport const STUDENT = 'STUDENT'\n\nexport const MENTORGROUP_LIST = 'MENTORGROUP_LIST'\nexport const STUDENT_LIST = 'STUDENT_LIST'\nexport const LECTURER_LIST = 'LECTURER_LIST'\nexport const COURSE_LIST = 'COURSE_LIST'\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  selectedStudentId: undefined,\n  selectedLecturerId: undefined,\n  selectedMentorId: undefined,\n  selectedCourseId: undefined,\n  selectedFacultyId: undefined,\n  loadingCount: 0,\n}\n\nexport const pageSlice = createSlice({\n  name: 'page',\n  initialState,\n  reducers: {\n    loadingStarted: (state, action) => {\n      state.loadingCount++\n    },\n    loadingDone: (state, action) => {\n      state.loadingCount--\n    },\n    setSelectedStudentId: (state, action) => {\n      state.selectedStudentId = action.payload\n    },\n    setSelectedLecturerId: (state, action) => {\n      state.selectedLecturerId = action.payload\n    },\n    setSelectedMentorId: (state, action) => {\n      state.selectedMentorId = action.payload\n    },\n    setSelectedCourseId: (state, action) => {\n      state.selectedCourseId = action.payload\n    },\n    setSelectedFacultyId: (state, action) => {\n      state.selectedFacultyId = action.payload\n    },\n  },\n})\n\nexport const selectLoadingCount = (state) => state[pageSlice.name].loadingCount\n\nexport const selectedStudentIdSelector = (state) =>\n  state[pageSlice.name].selectedStudentId\n\nexport const selectedLecturerIdSelector = (state) =>\n  state[pageSlice.name].selectedLecturerId\n\nexport const selectedMentorIdSelector = (state) =>\n  state[pageSlice.name].selectedMentorId\n\nexport const selectedCourseIdSelector = (state) =>\n  state[pageSlice.name].selectedCourseId\n\nexport const selectedFacultyIdSelector = (state) =>\n  state[pageSlice.name].selectedFacultyId\n\nexport const {\n  loadingStarted,\n  loadingDone,\n  setSelectedStudentId,\n  setSelectedLecturerId,\n  setSelectedMentorId,\n  setSelectedCourseId,\n  setSelectedFacultyId,\n} = pageSlice.actions\n","import dotenv from 'dotenv'\ndotenv.config()\n\n// Required environment variables\nconst ENV_VARS = ['REACT_APP_API_URL', 'NODE_ENV']\n\nconst config = {\n  apiUrl: process.env.REACT_APP_API_URL,\n  isProduction: process.env.NODE_ENV === 'production',\n\n  checkEnvVariables: function () {\n    ENV_VARS.forEach(function (key) {\n      if (!process.env[key]) {\n        console.warn('WARNING: Missing the environment variable ' + key)\n      }\n    })\n  },\n}\n\nexport default config\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport config from '../../config'\nimport { logout, selectJWT } from '../authSlice'\nimport {\n  COURSE,\n  COURSE_LIST,\n  FACULTY,\n  LECTURER,\n  LECTURER_LIST,\n  MENTORGROUP,\n  MENTORGROUP_LIST,\n  STUDENT,\n  STUDENT_LIST,\n} from './tagConstants'\nimport { loadingStarted, loadingDone } from '../pageSlice'\n\nconst authorizedBaseQuery = fetchBaseQuery({\n  baseUrl: `${config.apiUrl}/api`,\n\n  prepareHeaders: (headers, { getState }) => {\n    // By default, if we have a token in the store, let's use that for authenticated requests\n    const token = selectJWT(getState())\n    if (token) {\n      headers.set('authorization', `Bearer ${token}`)\n    }\n    return headers\n  },\n})\n\n// https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#axios-basequery\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  api.dispatch(loadingStarted())\n  let result = await authorizedBaseQuery(args, api, extraOptions)\n  api.dispatch(loadingDone())\n\n  if (result.error && result.error.status === 401) {\n    // // login again\n    // await api.dispatch(adminLogin())\n    // // retry the initial query\n    // result = await authorizedBaseQuery(args, api, extraOptions)\n    api.dispatch(logout())\n  }\n  return result\n}\n\n// Define our single API slice object\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  refetchOnReconnect: true,\n  tagTypes: [\n    COURSE,\n    FACULTY,\n    MENTORGROUP,\n    LECTURER,\n    STUDENT,\n    MENTORGROUP_LIST,\n    STUDENT_LIST,\n    LECTURER_LIST,\n    COURSE_LIST,\n  ],\n  endpoints: () => ({}),\n})\n","import Form from 'react-bootstrap/Form'\nimport { ErrorMessage } from 'formik'\n\nfunction InputField(props) {\n  const { field, form, type, label, placeholder, disabled } = props\n  const { errors, touched } = form\n  const { name } = field\n  const showError = errors[name] && touched[name]\n\n  return (\n    <Form.Group className=\"mb-3\">\n      {label && <Form.Label htmlFor={name}>{label}</Form.Label>}\n      <Form.Control\n        id={name}\n        {...field}\n        placeholder={placeholder}\n        type={type}\n        disabled={disabled}\n        isInvalid={showError}\n      />\n      <ErrorMessage\n        name={name}\n        render={(msg) => (\n          <Form.Control.Feedback type=\"invalid\">{msg}</Form.Control.Feedback>\n        )}\n      />\n    </Form.Group>\n  )\n}\n\nexport default InputField\n"],"sourceRoot":""}