{"version":3,"sources":["app/api/group/mentorSlice.js","app/api/group/courseSlice.js","pages/Student/components/StudentSearchCard/StudentAddModal.jsx","pages/Student/components/StudentSearchCard/index.jsx","pages/Student/components/StudentDetailCard/index.jsx","pages/Student/components/StudentListCard/index.jsx","pages/Student/index.jsx"],"names":["extendedApi","apiSlice","injectEndpoints","endpoints","builder","searchMentors","mutation","query","queryStr","url","method","params","groupType","providesTags","result","map","mentor","type","MENTORGROUP","id","groupId","getMentorInfo","getMentorGroupStudents","role","arg","student","STUDENT","userId","concat","STUDENT_LIST","addNewMentorGroup","body","mentorId","groupName","invalidatesTags","MENTORGROUP_LIST","removeMentorGroup","changeGroupName","error","changeMentorId","currentMentorId","newMentorId","useSearchMentorsMutation","useGetMentorGroupStudentsQuery","useGetMentorInfoQuery","useAddNewMentorGroupMutation","useRemoveMentorGroupMutation","useChangeGroupNameMutation","useChangeMentorIdMutation","searchCourses","course","COURSE","getCourseInfo","getCourseStudents","addNewCourse","courseName","timeSlot","lecturerId","COURSE_LIST","removeCourse","changeCourseName","changeCourseTimeSlot","changeCourseLecturer","currentLecturerId","newLecturerId","useSearchCoursesMutation","useGetCourseInfoQuery","useGetCourseStudentsQuery","useAddNewCourseMutation","useRemoveCourseMutation","useChangeCourseNameMutation","useChangeCourseTimeSlotMutation","useChangeCourseLecturerMutation","validationSchema","Yup","shape","required","name","password","passwordConfirmation","test","value","this","parent","address","facultyId","initialValues","StudentAddModal","show","handleClose","dispatch","useDispatch","useSearchFacultiesMutation","triggerSearch","useAddNewStudentMutation","triggerAdd","searchFaculties","inputValue","a","unwrap","faculties","faculty","label","handleSubmit","values","actions","setSelectedStudentId","console","log","Modal","onHide","Header","closeButton","Title","onSubmit","formikProps","Form","noValidate","onReset","handleReset","Body","component","InputField","placeholder","AsyncSelectField","loadOptions","Footer","Button","variant","onClick","isSubmitting","Spinner","animation","as","size","StudentSearchCard","useSearchStudentsMutation","trigger","data","isLoading","selectedStudentId","useSelector","selectedStudentIdSelector","useState","addModal","setAddModal","useEffect","setIsLoading","SearchCard","items","selectedItemKey","keySelector","nameSelector","showKey","onSearch","onAdd","onSelect","StudentDetailCard","useGetStudentMentorGroupQuery","mentorGroup","mentorIsFetching","isFetching","useGetStudentFacultyQuery","facultyIsFetching","useGetStudentInfoQuery","studentInfo","studentIsFetching","useRemoveStudentMutation","triggerRemoveStudent","useChangeStudentInfoMutation","triggerChangeStudentInfo","useChangeUserPasswordMutation","triggerChangePassword","useChangeStudentMentorMutation","triggerChangeMentor","useChangeStudentFacultyMutation","triggerChangeFaculty","triggerSearchFaculty","triggerSearchMentor","showRemoveWarning","setShowRemoveWarning","showEditInfoModal","setShowEditInfoModal","showChangePasswordModal","setShowChangePasswordModal","showChangeMentorModal","setShowChangeMentorModal","showChangeFacultyModal","setShowChangeFacultyModal","DetailCard","fields","content","psid","links","mentorName","destination","facultyName","buttons","EditUserInfoModal","title","ChangePasswordModal","SelectItemModal","newMentorGroupId","currentMentorGroupId","handleSearchItems","mentors","newFacultyId","currentFacultyId","ConfirmationModal","StudentListCard","useGetStudentCoursesQuery","courses","useRemoveStudentCourseMutation","triggerRemoveCourse","useAddStudentCourseMutation","triggerAddCourse","triggerSearchCourse","ListCard","linkSelector","showButtons","handleRemove","handleAdd","StudentPage","useItemParam","selectedItemId","setSelectedItemId","studentId","Row","className","Col","md"],"mappings":"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","file":"static/js/8.e28032b5.chunk.js","sourcesContent":["import {\r\n  MENTORGROUP,\r\n  MENTORGROUP_LIST,\r\n  STUDENT,\r\n  STUDENT_LIST,\r\n} from '../tagConstants'\r\nimport { apiSlice } from '../index'\r\n\r\nconst extendedApi = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    searchMentors: builder.mutation({\r\n      query: (queryStr) => ({\r\n        url: '/group',\r\n        method: 'GET',\r\n        params: { query: queryStr || '', groupType: 'MENTORGROUP' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result.map((mentor) => ({ type: MENTORGROUP, id: mentor.groupId })),\r\n    }),\r\n\r\n    getMentorInfo: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/mentor/info',\r\n        method: 'GET',\r\n        params: { groupId },\r\n      }),\r\n      providesTags: (result = {}, error, arg) => [\r\n        { type: MENTORGROUP, id: result.groupId },\r\n      ],\r\n    }),\r\n\r\n    getMentorGroupStudents: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/group/user',\r\n        method: 'GET',\r\n        params: { groupId, role: 'STUDENT' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result\r\n          .map((student) => ({ type: STUDENT, id: student.userId }))\r\n          .concat([{ type: STUDENT_LIST, id: arg }]),\r\n    }),\r\n\r\n    addNewMentorGroup: builder.mutation({\r\n      query: ({ mentorId, groupName }) => ({\r\n        url: '/mentor',\r\n        method: 'POST',\r\n        body: { mentorId, groupName },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: MENTORGROUP_LIST, id: arg.mentorId },\r\n      ],\r\n    }),\r\n\r\n    removeMentorGroup: builder.mutation({\r\n      query: ({ groupId }) => ({\r\n        url: '/group',\r\n        method: 'DELETE',\r\n        params: { groupId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeGroupName: builder.mutation({\r\n      query: ({ groupId, groupName }) => ({\r\n        url: '/group',\r\n        method: 'PUT',\r\n        body: { groupId, groupName },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeMentorId: builder.mutation({\r\n      query: ({ groupId, currentMentorId, newMentorId }) => ({\r\n        url: '/mentor',\r\n        method: 'PUT',\r\n        body: { groupId, mentorId: newMentorId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: MENTORGROUP, id: arg.groupId },\r\n        { type: MENTORGROUP_LIST, id: arg.currentMentorId },\r\n        { type: MENTORGROUP_LIST, id: arg.newMentorId },\r\n      ],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useSearchMentorsMutation,\r\n  useGetMentorGroupStudentsQuery,\r\n  useGetMentorInfoQuery,\r\n  useAddNewMentorGroupMutation,\r\n  useRemoveMentorGroupMutation,\r\n  useChangeGroupNameMutation,\r\n  useChangeMentorIdMutation,\r\n} = extendedApi\r\n","import { COURSE, COURSE_LIST, STUDENT, STUDENT_LIST } from '../tagConstants'\r\nimport { apiSlice } from '../index'\r\n\r\nconst extendedApi = apiSlice.injectEndpoints({\r\n  endpoints: (builder) => ({\r\n    searchCourses: builder.mutation({\r\n      query: (queryStr) => ({\r\n        url: '/group',\r\n        method: 'GET',\r\n        params: { query: queryStr || '', groupType: 'COURSE' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result.map((course) => ({ type: COURSE, id: course.groupId })),\r\n    }),\r\n\r\n    getCourseInfo: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/course/info',\r\n        method: 'GET',\r\n        params: { groupId },\r\n      }),\r\n      providesTags: (result, error, arg) => [{ type: COURSE, id: arg }],\r\n    }),\r\n\r\n    getCourseStudents: builder.query({\r\n      query: (groupId) => ({\r\n        url: '/group/user',\r\n        method: 'GET',\r\n        params: { groupId, role: 'STUDENT' },\r\n      }),\r\n      providesTags: (result = [], error, arg) =>\r\n        result\r\n          .map((student) => ({ type: STUDENT, id: student.userId }))\r\n          .concat([{ type: STUDENT_LIST, id: arg }]),\r\n    }),\r\n\r\n    addNewCourse: builder.mutation({\r\n      query: ({ courseName, timeSlot, lecturerId }) => ({\r\n        url: '/course',\r\n        method: 'POST',\r\n        body: { courseName, timeSlot, lecturerId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: COURSE_LIST, id: arg.lecturerId },\r\n      ],\r\n    }),\r\n\r\n    removeCourse: builder.mutation({\r\n      query: ({ groupId }) => ({\r\n        url: '/group',\r\n        method: 'DELETE',\r\n        params: { groupId },\r\n      }),\r\n      invalidatesTags: (result = [], error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseName: builder.mutation({\r\n      query: ({ groupId, groupName }) => ({\r\n        url: '/group',\r\n        method: 'PUT',\r\n        body: { groupId, groupName },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseTimeSlot: builder.mutation({\r\n      query: ({ groupId, timeSlot }) => ({\r\n        url: '/course/timeslot',\r\n        method: 'PUT',\r\n        body: { groupId, timeSlot },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n      ],\r\n    }),\r\n\r\n    changeCourseLecturer: builder.mutation({\r\n      query: ({ groupId, currentLecturerId, newLecturerId }) => ({\r\n        url: '/course/lecturer',\r\n        method: 'PUT',\r\n        body: { groupId, lecturerId: newLecturerId },\r\n      }),\r\n      invalidatesTags: (result, error, arg) => [\r\n        { type: COURSE, id: arg.groupId },\r\n        { type: COURSE_LIST, id: arg.currentLecturerId },\r\n        { type: COURSE_LIST, id: arg.newLecturerId },\r\n      ],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useSearchCoursesMutation,\r\n  useGetCourseInfoQuery,\r\n  useGetCourseStudentsQuery,\r\n  useAddNewCourseMutation,\r\n  useRemoveCourseMutation,\r\n  useChangeCourseNameMutation,\r\n  useChangeCourseTimeSlotMutation,\r\n  useChangeCourseLecturerMutation,\r\n} = extendedApi\r\n","import * as Yup from 'yup'\r\nimport { FastField, Formik } from 'formik'\r\nimport { Modal, Button, Form, Spinner } from 'react-bootstrap'\r\nimport InputField from '../../../../components/custom-fields/InputField'\r\nimport AsyncSelectField from '../../../../components/custom-fields/AsyncSelectField'\r\nimport { useSearchFacultiesMutation } from '../../../../app/api/group/facultySlice'\r\nimport { useAddNewStudentMutation } from '../../../../app/api/user/studentSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setSelectedStudentId } from '../../../../app/pageSlice'\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  id: Yup.string().required('This field is required.'),\r\n  name: Yup.string().required('This field is required.'),\r\n  password: Yup.string().required('This field is required.'),\r\n  passwordConfirmation: Yup.string().test(\r\n    'passwords-match',\r\n    'Passwords must match',\r\n    function (value) {\r\n      return this.parent.password === value\r\n    },\r\n  ),\r\n  address: Yup.string().required('This field is required.'),\r\n  facultyId: Yup.string().required('This field is required.'),\r\n})\r\n\r\nconst initialValues = {\r\n  id: '',\r\n  name: '',\r\n  password: '',\r\n  passwordConfirmation: '',\r\n  address: '',\r\n  facultyId: '',\r\n}\r\n\r\nconst StudentAddModal = ({ show, handleClose }) => {\r\n  const dispatch = useDispatch()\r\n  const [triggerSearch] = useSearchFacultiesMutation()\r\n  const [triggerAdd] = useAddNewStudentMutation()\r\n\r\n  const searchFaculties = async (inputValue) => {\r\n    const faculties = await triggerSearch(inputValue).unwrap()\r\n    return faculties.map((faculty) => ({\r\n      value: faculty.groupId,\r\n      label: faculty.groupName,\r\n    }))\r\n  }\r\n\r\n  const handleSubmit = async (values, actions) => {\r\n    try {\r\n      await triggerAdd(values)\r\n      handleClose()\r\n      dispatch(setSelectedStudentId(values.id))\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Add new student</Modal.Title>\r\n      </Modal.Header>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={handleSubmit}\r\n        validationSchema={validationSchema}\r\n      >\r\n        {(formikProps) => (\r\n          <Form\r\n            noValidate\r\n            onSubmit={formikProps.handleSubmit}\r\n            onReset={formikProps.handleReset}\r\n          >\r\n            <Modal.Body>\r\n              <FastField\r\n                name=\"id\"\r\n                component={InputField}\r\n                label=\"Student ID\"\r\n                placeholder=\"ITITIU18302...\"\r\n              />\r\n              <FastField\r\n                name=\"name\"\r\n                component={InputField}\r\n                label=\"Name\"\r\n                placeholder=\"Le Van A...\"\r\n              />\r\n              <FastField\r\n                name=\"address\"\r\n                component={InputField}\r\n                label=\"Address\"\r\n                placeholder=\"District 5, Ho Chi Minh City...\"\r\n              />\r\n              <FastField\r\n                name=\"password\"\r\n                component={InputField}\r\n                placeholder=\"New password...\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n              />\r\n              <FastField\r\n                name=\"passwordConfirmation\"\r\n                component={InputField}\r\n                placeholder=\"Type password again...\"\r\n                type=\"password\"\r\n                label=\"Password confirmation\"\r\n              />\r\n              <FastField\r\n                name=\"facultyId\"\r\n                component={AsyncSelectField}\r\n                loadOptions={searchFaculties}\r\n                label=\"Faculty\"\r\n              />\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                {formikProps.isSubmitting && (\r\n                  <Spinner\r\n                    animation=\"border\"\r\n                    as=\"span\"\r\n                    role=\"status\"\r\n                    size=\"sm\"\r\n                  />\r\n                )}\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default StudentAddModal\r\n","import SearchCard from '../../../../components/SearchCard'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n  selectedStudentIdSelector,\r\n  setIsLoading,\r\n  setSelectedStudentId,\r\n} from '../../../../app/pageSlice'\r\nimport { useSearchStudentsMutation } from '../../../../app/api/user/studentSlice'\r\nimport { Fragment, useEffect, useState } from 'react'\r\nimport StudentAddModal from './StudentAddModal'\r\n\r\nconst StudentSearchCard = () => {\r\n  const dispatch = useDispatch()\r\n  const [trigger, query] = useSearchStudentsMutation()\r\n  const { data, isLoading } = query\r\n  const selectedStudentId = useSelector(selectedStudentIdSelector)\r\n  const [addModal, setAddModal] = useState(false)\r\n\r\n  useEffect(() => {\r\n    dispatch(setIsLoading(isLoading))\r\n  }, [isLoading, dispatch])\r\n\r\n  return (\r\n    <Fragment>\r\n      <SearchCard\r\n        label=\"Student\"\r\n        items={data}\r\n        selectedItemKey={selectedStudentId}\r\n        keySelector={(student) => student.id}\r\n        nameSelector={(student) => student.name}\r\n        showKey={true}\r\n        onSearch={(query) => trigger(query)}\r\n        onAdd={() => setAddModal(true)}\r\n        onSelect={(student) => dispatch(setSelectedStudentId(student.id))}\r\n      />\r\n      <StudentAddModal show={addModal} handleClose={() => setAddModal(false)} />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default StudentSearchCard\r\n","import { Fragment, useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  useChangeStudentFacultyMutation,\r\n  useChangeStudentInfoMutation,\r\n  useChangeStudentMentorMutation,\r\n  useChangeUserPasswordMutation,\r\n  useGetStudentFacultyQuery,\r\n  useGetStudentInfoQuery,\r\n  useGetStudentMentorGroupQuery,\r\n  useRemoveStudentMutation,\r\n} from '../../../../app/api/user/studentSlice'\r\nimport DetailCard from '../../../../components/DetailCard'\r\nimport { setIsLoading, setSelectedStudentId } from '../../../../app/pageSlice'\r\nimport ConfirmationModal from '../../../../components/modals/ConfirmationModal'\r\nimport EditUserInfoModal from '../../../../components/modals/EditUserInfoModal'\r\nimport ChangePasswordModal from '../../../../components/modals/ChangePasswordModal'\r\nimport SelectItemModal from '../../../../components/modals/SelectItemModal'\r\nimport { useSearchFacultiesMutation } from '../../../../app/api/group/facultySlice'\r\nimport { useSearchMentorsMutation } from '../../../../app/api/group/mentorSlice'\r\n\r\nconst StudentDetailCard = ({ selectedStudentId }) => {\r\n  const { data: mentorGroup, isFetching: mentorIsFetching } =\r\n    useGetStudentMentorGroupQuery(selectedStudentId)\r\n  const { data: faculty, isFetching: facultyIsFetching } =\r\n    useGetStudentFacultyQuery(selectedStudentId)\r\n  const { data: studentInfo, isFetching: studentIsFetching } =\r\n    useGetStudentInfoQuery(selectedStudentId)\r\n\r\n  const [triggerRemoveStudent] = useRemoveStudentMutation()\r\n  const [triggerChangeStudentInfo] = useChangeStudentInfoMutation()\r\n  const [triggerChangePassword] = useChangeUserPasswordMutation()\r\n  const [triggerChangeMentor] = useChangeStudentMentorMutation()\r\n  const [triggerChangeFaculty] = useChangeStudentFacultyMutation()\r\n  const [triggerSearchFaculty] = useSearchFacultiesMutation()\r\n  const [triggerSearchMentor] = useSearchMentorsMutation()\r\n\r\n  const [showRemoveWarning, setShowRemoveWarning] = useState(false)\r\n  const [showEditInfoModal, setShowEditInfoModal] = useState(false)\r\n  const [showChangePasswordModal, setShowChangePasswordModal] = useState(false)\r\n  const [showChangeMentorModal, setShowChangeMentorModal] = useState(false)\r\n  const [showChangeFacultyModal, setShowChangeFacultyModal] = useState(false)\r\n\r\n  const isFetching = mentorIsFetching || facultyIsFetching || studentIsFetching\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    if (isFetching) {\r\n      dispatch(setIsLoading(true))\r\n    } else {\r\n      dispatch(setIsLoading(false))\r\n    }\r\n  }, [isFetching, dispatch])\r\n\r\n  if (isFetching) {\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <DetailCard\r\n        label=\"Student\"\r\n        fields={[\r\n          { label: 'Name', content: studentInfo.name },\r\n          { label: 'ID', content: studentInfo.id },\r\n          { label: 'PSID', content: studentInfo.psid },\r\n          { label: 'Address', content: studentInfo.address },\r\n        ]}\r\n        links={[\r\n          {\r\n            label: 'Mentor',\r\n            content: `${mentorGroup.mentorName} (${mentorGroup.groupName})`,\r\n            destination: `/mentor/${mentorGroup.groupId || ''}`,\r\n          },\r\n          {\r\n            label: 'Faculty',\r\n            content: faculty.facultyName,\r\n            destination: `/faculty/${faculty.groupId || ''}`,\r\n          },\r\n        ]}\r\n        buttons={[\r\n          {\r\n            label: 'Edit basic info',\r\n            onClick: () => {\r\n              setShowEditInfoModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change password',\r\n            onClick: () => {\r\n              setShowChangePasswordModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change mentor',\r\n            onClick: () => {\r\n              setShowChangeMentorModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Change faculty',\r\n            onClick: () => {\r\n              setShowChangeFacultyModal(true)\r\n            },\r\n          },\r\n          {\r\n            label: 'Remove student',\r\n            onClick: () => {\r\n              setShowRemoveWarning(true)\r\n            },\r\n          },\r\n        ]}\r\n      />\r\n      <EditUserInfoModal\r\n        title=\"Edit student info\"\r\n        show={showEditInfoModal}\r\n        handleClose={() => {\r\n          setShowEditInfoModal(false)\r\n        }}\r\n        handleSubmit={async ({ name, address }) => {\r\n          await triggerChangeStudentInfo({\r\n            id: studentInfo.id,\r\n            name,\r\n            address,\r\n          })\r\n        }}\r\n        initialValues={{\r\n          name: studentInfo.name,\r\n          address: studentInfo.address,\r\n        }}\r\n      />\r\n      <ChangePasswordModal\r\n        title=\"Change student password\"\r\n        show={showChangePasswordModal}\r\n        handleClose={() => {\r\n          setShowChangePasswordModal(false)\r\n        }}\r\n        handleSubmit={async (password) => {\r\n          await triggerChangePassword({\r\n            userId: studentInfo.id,\r\n            password,\r\n          })\r\n        }}\r\n      />\r\n      <SelectItemModal\r\n        title=\"Change mentor group\"\r\n        show={showChangeMentorModal}\r\n        handleClose={() => {\r\n          setShowChangeMentorModal(false)\r\n        }}\r\n        handleSubmit={async (newMentorGroupId) => {\r\n          await triggerChangeMentor({\r\n            id: studentInfo.id,\r\n            currentMentorGroupId: mentorGroup.groupId,\r\n            newMentorGroupId,\r\n          })\r\n        }}\r\n        handleSearchItems={async (query) => {\r\n          const mentors = await triggerSearchMentor(query).unwrap()\r\n          return mentors.map((mentor) => ({\r\n            value: mentor.groupId,\r\n            label: mentor.groupName,\r\n          }))\r\n        }}\r\n      />\r\n      <SelectItemModal\r\n        title=\"Change student faculty\"\r\n        show={showChangeFacultyModal}\r\n        handleClose={() => {\r\n          setShowChangeFacultyModal(false)\r\n        }}\r\n        handleSubmit={async (newFacultyId) => {\r\n          await triggerChangeFaculty({\r\n            id: studentInfo.id,\r\n            currentFacultyId: faculty.groupId,\r\n            newFacultyId,\r\n          })\r\n        }}\r\n        handleSearchItems={async (query) => {\r\n          const faculties = await triggerSearchFaculty(query).unwrap()\r\n          return faculties.map((faculty) => ({\r\n            value: faculty.groupId,\r\n            label: faculty.groupName,\r\n          }))\r\n        }}\r\n      />\r\n      <ConfirmationModal\r\n        title=\"Remove student?\"\r\n        content=\"Information related to this student cannot be recovered.\"\r\n        show={showRemoveWarning}\r\n        handleClose={() => setShowRemoveWarning(false)}\r\n        handleSubmit={async () => {\r\n          dispatch(setSelectedStudentId(null))\r\n          await triggerRemoveStudent({ userId: studentInfo.id }).unwrap()\r\n        }}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default StudentDetailCard\r\n","import { useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport {\r\n  useAddStudentCourseMutation,\r\n  useGetStudentCoursesQuery,\r\n  useRemoveStudentCourseMutation,\r\n} from '../../../../app/api/user/studentSlice'\r\nimport { useSearchCoursesMutation } from '../../../../app/api/group/courseSlice'\r\nimport { setIsLoading } from '../../../../app/pageSlice'\r\nimport ListCard from '../../../../components/ListCard'\r\n\r\nconst StudentListCard = ({ selectedStudentId }) => {\r\n  const { data: courses, isFetching } =\r\n    useGetStudentCoursesQuery(selectedStudentId)\r\n  const dispatch = useDispatch()\r\n  const [triggerRemoveCourse] = useRemoveStudentCourseMutation()\r\n  const [triggerAddCourse] = useAddStudentCourseMutation()\r\n  const [triggerSearchCourse] = useSearchCoursesMutation()\r\n\r\n  useEffect(() => {\r\n    if (isFetching) {\r\n      dispatch(setIsLoading(true))\r\n    } else {\r\n      dispatch(setIsLoading(false))\r\n    }\r\n  }, [isFetching, dispatch])\r\n\r\n  if (isFetching) {\r\n    return <></>\r\n  }\r\n\r\n  return (\r\n    <ListCard\r\n      label=\"Course\"\r\n      items={courses}\r\n      keySelector={(course) => course.groupId}\r\n      nameSelector={(course) => course.courseName}\r\n      linkSelector={(course) => `/course/${course.groupId}`}\r\n      showButtons={true}\r\n      handleRemove={async (course) => {\r\n        await triggerRemoveCourse({\r\n          userId: selectedStudentId,\r\n          groupId: course.groupId,\r\n        }).unwrap()\r\n      }}\r\n      handleAdd={async (groupId) => {\r\n        await triggerAddCourse({\r\n          userId: selectedStudentId,\r\n          groupId: groupId,\r\n        }).unwrap()\r\n      }}\r\n      handleSearchItems={async (query) => {\r\n        const courses = await triggerSearchCourse(query).unwrap()\r\n        return courses.map((course) => ({\r\n          value: course.groupId,\r\n          label: course.groupName,\r\n        }))\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nexport default StudentListCard\r\n","import useItemParam from '../../hooks/useItemParam'\r\nimport {\r\n  selectedStudentIdSelector,\r\n  setSelectedStudentId,\r\n} from '../../app/pageSlice'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport StudentSearchCard from './components/StudentSearchCard'\r\nimport StudentDetailCard from './components/StudentDetailCard'\r\nimport StudentListCard from './components/StudentListCard'\r\nimport { Fragment } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nconst StudentPage = () => {\r\n  const dispatch = useDispatch()\r\n  const selectedStudentId = useSelector(selectedStudentIdSelector)\r\n\r\n  useItemParam({\r\n    selectedItemId: selectedStudentId,\r\n    setSelectedItemId: (studentId) => {\r\n      dispatch(setSelectedStudentId(studentId))\r\n    },\r\n  })\r\n\r\n  return (\r\n    <Row className=\"justify-content-md-center my-3\">\r\n      <Col md=\"3\">\r\n        <StudentSearchCard />\r\n      </Col>\r\n      {selectedStudentId ? (\r\n        <Fragment>\r\n          <Col md=\"4\">\r\n            <StudentDetailCard selectedStudentId={selectedStudentId} />\r\n          </Col>\r\n          <Col md=\"4\">\r\n            <StudentListCard selectedStudentId={selectedStudentId} />\r\n          </Col>\r\n        </Fragment>\r\n      ) : (\r\n        <Fragment>\r\n          <Col md=\"4\"></Col>\r\n          <Col md=\"4\"></Col>\r\n        </Fragment>\r\n      )}\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default StudentPage\r\n"],"sourceRoot":""}